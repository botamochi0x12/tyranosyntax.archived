export interface _Node<T extends string> {
    type: T;
    loc?: SourceLocation | null;
    start?: number;
    end?: number;
}
export interface SourceLocation {
    start: Position;
    end: Position;
    source?: string;
}
export interface Position {
    /** >= 1 */
    line: number;
    /** >= 0 */
    column: number;
}
export declare type Node = Script | Content | CommandParameter | Literal | Identifier | CookedText;
export interface Script extends _Node<'Script'> {
    flavor?: 'vanilla' | 'yuzusoft';
    contents: Content[];
}
export declare type Content = Command | Text | Label | Comment;
export interface Command extends _Node<'Command'> {
    name: Identifier | null;
    parameters: CommandParameter[];
    raw?: string;
}
export interface CommandParameter extends _Node<'CommandParameter'> {
    name: Identifier;
    value?: Literal;
}
export interface Text extends _Node<'Text'> {
    raw: string;
    cooked?: CookedText;
}
export interface CookedText extends _Node<'CookedText'> {
    name?: Identifier;
    as?: Identifier;
    said: Literal;
}
export interface Label extends _Node<'Label'> {
    name: Identifier;
    comment?: Comment;
}
export interface Comment extends _Node<'Comment'> {
    raw: string;
}
export interface Identifier extends _Node<'Identifier'> {
    name: string;
}
export interface Literal extends _Node<'Literal'> {
    value: string | number | boolean;
}
